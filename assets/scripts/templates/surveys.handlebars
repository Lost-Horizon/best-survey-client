{{#each surveys as |survey|}}
<section class="see-all-surveys-section" id="see-all-surveys-section">
    <div class="row">
        <h3 style="margin-left: 20px"> Question </h3>
        <div class="col jumbotron">
            <p>The question of the survey (which I assume will look something like
                the
                folowing: {{log.question}}) is going to be here, so... there...</p>
        </div>

        <div class="col">
            {{Number}} answered true to this question <br />
            {{Number}} answered false to this question
            <hr />
            Answer either true or false for this question
            <div class="row" style="margin-left: .1%">
                <div class="col button-true-div">
                    <button class="btn btn-success"> TRUE </button>
                </div>
                <div class="col">
                    <button class="btn btn-danger"> FALSE </button>
                </div>
            </div>
        </div>
    </div>
</section>



{{#each logs as |log|}}

<div class="card text-center">
    <div class="card-header">
        <h5 data-id="{{log.id}}">{{log.date}}</h5>
    </div>
    <div class="card-body">
        <section data-id="{{log.id}}">
            <p>{{#if log.feet}}
                Feet: {{log.feet}}
                {{else}}
                No log provided.
                {{/if}}
            </p>
            <p>{{#if log.activity}}
                Activity: {{log.activity}}
                {{else}}
                No activity provided.
                {{/if}}
            </p>
            <button id="deleteButton" class="fas fa-trash-alt" aria-hidden="true" type="submit"></button>
            <button id="updateButton" class="fas fa-edit" aria-hidden="true" data-toggle="modal" data-target="#modalUpdateLogForm"></button>
        </section>
    </div>
</div>

{{/each}}


{{!--
const mongoose = require('mongoose')

const responseSchema = new mongoose.Schema({
answer: {
type: String,
required: true
},
owner: {
type: mongoose.Schema.Types.ObjectId,
ref: 'User',
required: true
}
}, {
timestamps: true
})

const surveySchema = new mongoose.Schema({
question: {
type: String,
required: true
},

responses: [responseSchema],
owner: {
type: mongoose.Schema.Types.ObjectId,
ref: 'User',
required: true
}
}, {
timestamps: true
})

module.exports = mongoose.model('Survey', surveySchema) --}}